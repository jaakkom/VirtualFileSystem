<?php

declare(strict_types=1);

/*
 * This file is part of Twifty Virtual Filesystem.
 *
 * (c) Owen Parry <waldermort@gmail.com>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace Twifty\VirtualFileSystem\Test\Inject;

use PHPUnit\Framework\TestCase;
use Twifty\VirtualFileSystem\Inject\Glob;

/**
 * Test case for Glob.
 *
 * Generated by twifty-test-generator 0.0.1-beta.1 on 2017-07-17.
 *
 * @author Owen Parry <waldermort@gmail.com>
 */
class GlobTest extends TestCase
{
    /**
     * @var Glob
     */
    protected $glob;

    /**
     * @var VirtualFileSystem
     */
    protected $vfs;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->vfs = new \Twifty\VirtualFileSystem\VirtualFileSystem();
        $this->glob = new Glob($this->vfs->path('/'));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
        $this->vfs = null;
        $this->glob = null;
    }

    public function testCallsGlobal()
    {
        $this->assertSame('glob', $this->glob->getName());
        
        $result = (new Glob())('*');

        $this->assertSame(\glob('*'), $result);
    }

    public function testBasicGlob()
    {
        $this->createFiles(['foo.txt', 'bar.txt']);

        $result = ($this->glob)('*', GLOB_NOSORT);

        $this->assertSame(['foo.txt', 'bar.txt'], $result);
    }

    public function testBasicGlobWithPath()
    {
        $this->createFiles(['foo/bar/baz/foo.txt', 'foo/bar/baz/bar.txt']);

        $result = ($this->glob)('foo/bar/baz/*', GLOB_NOSORT);

        $this->assertSame(['foo/bar/baz/foo.txt', 'foo/bar/baz/bar.txt'], $result);
    }

    public function testPatternMatchGlob()
    {
        $this->createFiles(['foo.txt', 'bar.jpg']);

        $result = ($this->glob)('*.txt', GLOB_NOSORT);

        $this->assertSame(['foo.txt'], $result);
    }

    public function testBraceExpansionGlob()
    {
        $this->createFiles(['foo.txt', 'bar.jpg']);

        $result = ($this->glob)('{*.txt,*.jpg}', GLOB_BRACE | GLOB_NOSORT);

        $this->assertSame(['foo.txt', 'bar.jpg'], $result);
    }

    public function testNoBraceExpansionGlob()
    {
        $this->createFiles(['foo.txt', 'bar.jpg']);

        $result = ($this->glob)('{*.txt,*.jpg}');

        $this->assertSame([], $result);
    }

    public function testGlobSortOrder()
    {
        $this->createFiles(['foo.txt', 'zoo.txt', 'bar.txt']);

        $result = ($this->glob)('*');

        $this->assertSame(['bar.txt', 'foo.txt', 'zoo.txt'], $result);
    }

    public function testEscapeGlob()
    {
        $this->createFiles(['[house].txt']);

        $result = ($this->glob)('\[house\].txt');

        $this->assertSame(['[house].txt'], $result);
    }

    public function testNoEscapeSetGlob()
    {
        $this->createFiles(['[house].txt']);

        $result = ($this->glob)('\[house\].txt', GLOB_NOESCAPE);

        $this->assertSame([], $result);
    }

    public function testNoCheckGlob()
    {
        $this->createFiles(['foo.txt', 'bar.jpg']);

        $result = ($this->glob)('*.png', GLOB_NOCHECK);

        $this->assertSame(['*.png'], $result);
    }

    public function testNoCheckGlobNotEmpty()
    {
        $this->createFiles(['foo.txt', 'bar.jpg']);

        $result = ($this->glob)('*.txt', GLOB_NOCHECK);

        $this->assertSame(['foo.txt'], $result);
    }

    public function testGlobOnlyDirectories()
    {
        $this->createFiles('foo/bar.txt');
        $this->createDirectories('foo/baz');

        $result = ($this->glob)('foo/*', GLOB_ONLYDIR);

        $this->assertSame(['foo/baz'], $result);
    }

    public function testGlobMark()
    {
        $this->createDirectories(['foo', 'bar']);

        $result = ($this->glob)('*', GLOB_MARK);

        $this->assertSame(['bar/', 'foo/'], $result);
    }

    public function testWildcardPath()
    {
        $this->createFiles(['dir1/foo.txt', 'dir1/bar.txt', 'dir2/foo.txt']);

        $result = ($this->glob)('*/*.txt');

        $this->assertSame(['dir1/bar.txt', 'dir1/foo.txt', 'dir2/foo.txt'], $result);
    }

    /**
     * @dataProvider provideBraceExpansion
     * @dataProvider providePatternMatches
     *
     * @param string[] $setup
     * @param string   $pattern
     * @param string[] $expect
     */
    public function testFileGlobPatterns(array $setup, string $pattern, int $options = 0, array $expect = null)
    {
        $this->createFiles($setup);

        if (null === $expect) {
            $expect = $setup;
        }

        sort($expect);

        $this->assertSame($expect, ($this->glob)($pattern, $options));
    }

    public function provideBraceExpansion()
    {
        return [
            [['foo.jpg'], '{*.jpg}', GLOB_BRACE],
            [['foo.jpg', 'foo.png'], '{*.jpg,*.png}', GLOB_BRACE],
            [['foo.jpg', 'foo.png'], '{,*.jpg,,*.png,}', GLOB_BRACE],
            [['foo.jpg', 'foo.png'], '{*.jpg , *.png}', GLOB_BRACE],
            [['foo/a/foo.jpg', 'foo/b/foo.jpg'], 'foo/{a,b}/foo.jpg', GLOB_BRACE],
            [['foo/bar1/foo.jpg', 'foo/bar2/foo.jpg', 'foo/bar3/foo.jpg'], 'foo/bar{1,3}/foo.jpg', GLOB_BRACE, ['foo/bar1/foo.jpg', 'foo/bar3/foo.jpg']],
            [['a/b/c/d', 'a/c/c/d', 'a/b/c/e'], 'a/{b,c}/c/{d,e}', GLOB_BRACE],
        ];
    }

    public function providePatternMatches()
    {
        return [
            [['foo.txt'], '*.txt'],
            [['foo.txt'], '*'],
            [['foo.txt'], '*.jpg', 0, []],
            [['foo.txt'], 'f??.txt'],
            [['foo.txt'], 'f?.txt', 0, []],
            [['f7.txt'], 'f[0-9].txt'],
            [['f[].txt'], 'f\[\].txt'],
            [['f[].txt]'], 'f\[\].txt', GLOB_NOESCAPE, []],
            [['\".txt'], '\".txt', GLOB_NOESCAPE],
            [['\".txt'], '\".txt', 0, []],
        ];
    }

    /**
     * @dataProvider provideDirectoryGlobPatterns
     *
     * @param string[] $expect
     * @param string   $pattern
     */
    public function testDirectoryGlobPatterns(array $expect, string $pattern)
    {
        $this->createDirectories($expect);

        sort($expect);

        $this->assertSame($expect, ($this->glob)($pattern, GLOB_ONLYDIR));
    }

    public function provideDirectoryGlobPatterns()
    {
        return [
            [['foo/bar/baz'], 'foo/*/baz'],
            [['foo/bar'], '*/bar'],
            [['foo/bar'], '/foo/*'],
            [['foo/bar'], '/foo/*/'],
            [['foo/a/bar'], 'foo/?/bar/'],
            [['a/bar'], '?/bar/'],
            [['foo/a'], '/foo/?'],
            [['foo/bar/baz'], 'foo/?ar/baz/'],
            [['foo/bar'], '?oo/bar/'],
            [['foo/bar'], '/foo/?ar'],
            [['foo/bob/bar/and/baz'], 'foo/*/bar/*/baz/'],
            [['bob/bar/and/baz'], '*/bar/*/baz/'],
            [['foo/bob/bar/baz'], '/foo/*/bar/*'],
            [['foo/bob'], './foo/*/'],
            [['foo'], '*/'],
            [['andfoo'], '*foo'],
            [['bingowasizname'], '*'],
        ];
    }

    protected function createFiles($files)
    {
        foreach ((array) $files as $file) {
            $this->vfs->createFile('/'.$file);
        }
    }

    protected function createDirectories($files)
    {
        foreach ((array) $files as $file) {
            $this->vfs->createDirectory('/'.$file);
        }
    }
}
