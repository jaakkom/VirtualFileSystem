<?php

declare(strict_types=1);

/*
 * This file is part of Twifty Virtual Filesystem.
 *
 * (c) Owen Parry <waldermort@gmail.com>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace Twifty\VirtualFileSystem\Test\Inject;

use PHPUnit\Framework\TestCase;
use Twifty\VirtualFileSystem\Inject\AbstractInjectable;

/**
 * Test case for AbstractInjectable.
 *
 * Generated by twifty-test-generator 0.0.1-beta.1 on 2017-07-18.
 *
 * @author Owen Parry <waldermort@gmail.com>
 */
class AbstractInjectableTest extends TestCase
{
    /**
     * @dataProvider provideFileResolution
     *
     * @param string $cwd
     * @param string $expect
     * @param string $arg
     */
    public function testFileResolution(string $cwd = null, string $expect = null, string $arg = null)
    {
        $inst = new class($cwd) extends AbstractInjectable {
            public function resolve(string $path = null)
            {
                return $this->resolvePath($path);
            }

            public function __invoke(...$args)
            {
            }

            public function getName(): string
            {
            }
        };

        $this->assertSame($expect, $inst->resolve($arg));
    }

    public function provideFileResolution(): array
    {
        return [
            [null, null, null],
            [null, null, ''],
            ['vfs://', 'vfs://', null],
            ['vfs://///', 'vfs://', null],
            ['vfs://', 'vfs://foo/bar', 'foo/bar'],
            ['vfs://', null, 'C:\\Win\\Blowz'],
            ['vfs://', 'vfs://foo/bar', 'foo//bar'],
            ['vfs://', 'vfs://', 'vfs://'],
            ['vfs://', 'vfs://', 'vfs:///'],
            ['vfs://', 'vfs://foo', 'vfs://foo'],
            ['vfs://foo', null, '/'],
            ['vfs://foo', null, '/bar'],
            ['vfs://foo', null, 'C:\\Win\\Blowz'],
            ['vfs://foo', 'vfs://foo/bar', 'bar'],
            ['vfs://foo', 'vfs://foo/bar', 'bar/'],
            ['vfs://foo', 'vfs://foo/bar/baz', 'bar//baz'],
        ];
    }

    public function testInvalidWorkingDir()
    {
        $this->expectException(\InvalidArgumentException::class);
        $this->expectExceptionMessageRegExp('{Not a valid url}');

        new class('foo') extends AbstractInjectable {
            public function __invoke(...$args)
            {
            }

            public function getName(): string
            {
            }
        };
    }
}
