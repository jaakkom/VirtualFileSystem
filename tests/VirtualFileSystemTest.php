<?php

declare(strict_types=1);

/*
 * This file is part of Twifty Virtual Filesystem.
 *
 * (c) Owen Parry <waldermort@gmail.com>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace Twifty\VirtualFileSystem\Test;

use PHPUnit\Framework\TestCase;
use Twifty\VirtualFileSystem\Inject\Glob;
use Twifty\VirtualFileSystem\Inject\RealPath;
use Twifty\VirtualFileSystem\Node\Directory;
use Twifty\VirtualFileSystem\Node\File;
use Twifty\VirtualFileSystem\System\Emulator;
use Twifty\VirtualFileSystem\System\Registry;
use Twifty\VirtualFileSystem\VirtualFileSystem;

/**
 * Test case for VirtualFileSystem.
 *
 * Generated by twifty-test-generator 0.0.1-beta.1 on 2017-07-16.
 *
 * @author Owen Parry <waldermort@gmail.com>
 */
class VirtualFileSystemTest extends TestCase
{
    /**
     * @var Emulator
     */
    protected $emulator;

    protected function setUp(): void
    {
        $this->emulator = new Emulator('test-user', 'test-group');
        $this->emulator->createUser('other-user', ['other-group']);
    }

    protected function tearDown(): void
    {
        $this->emulator = null;
    }

    public function testCreation()
    {
        $refl = (new \ReflectionClass(Registry::class))->getProperty('registry');
        $refl->setAccessible(true);

        $this->assertEmpty($refl->getValue());

        $fs = new VirtualFileSystem();

        $this->assertNotEmpty($refl->getValue());
        $this->assertTrue(in_array($fs->root(), $refl->getValue(), true));

        unset($fs);

        $this->assertEmpty($refl->getValue());

        $refl->setAccessible(false);
    }

    public function testPath()
    {
        $fs = new VirtualFileSystem();

        $this->assertSame($fs->root()->getPath(), $fs->path('/'));
    }

    public function testCreateDirectory()
    {
        $fs = new VirtualFileSystem(null, $this->emulator);

        $fs->createDirectory('/var/foo');
        $fs->createDirectory('/var/bar', 'other-user', 'other-group', 0700);

        $this->assertTrue(is_dir($fs->path('/var/foo')));
        $this->assertTrue(is_dir($fs->path('/var/bar')));

        $this->assertNotEmpty($fooStat = stat($fs->path('/var/foo')));
        $this->assertNotEmpty($barStat = stat($fs->path('/var/bar')));

        $this->assertSame(040755, $fooStat['mode'] ?? null);
        $this->assertSame(040700, $barStat['mode'] ?? null);

        $this->assertSame($this->emulator->getUserId('test-user'), $fooStat['uid'] ?? null);
        $this->assertSame($this->emulator->getUserId('other-user'), $barStat['uid'] ?? null);

        $this->assertSame($this->emulator->getGroupId('test-group'), $fooStat['gid'] ?? null);
        $this->assertSame($this->emulator->getGroupId('other-group'), $barStat['gid'] ?? null);
    }

    public function testCreateFile()
    {
        $fs = new VirtualFileSystem(null, $this->emulator);

        $fs->createFile('/var/foo.txt');
        $fs->createFile('/var/bar.txt', null, 'other-user', 'other-group', 0700);

        $this->assertTrue(is_file($fs->path('/var/foo.txt')));
        $this->assertTrue(is_file($fs->path('/var/bar.txt')));

        $this->assertNotEmpty($fooStat = stat($fs->path('/var/foo.txt')));
        $this->assertNotEmpty($barStat = stat($fs->path('/var/bar.txt')));

        $this->assertSame(0100755, $fooStat['mode'] ?? null);
        $this->assertSame(0100700, $barStat['mode'] ?? null);

        $this->assertSame($this->emulator->getUserId('test-user'), $fooStat['uid'] ?? null);
        $this->assertSame($this->emulator->getUserId('other-user'), $barStat['uid'] ?? null);

        $this->assertSame($this->emulator->getGroupId('test-group'), $fooStat['gid'] ?? null);
        $this->assertSame($this->emulator->getGroupId('other-group'), $barStat['gid'] ?? null);
    }

    public function testCreateSymlink()
    {
        $fs = new VirtualFileSystem(null, $this->emulator);

        $file = $fs->createFile('/var/foo.txt');
        $fs->createSymlink('/var/bar.txt', $file, 'other-user', 'other-group', 0700);

        $this->assertTrue(is_file($fs->path('/var/foo.txt')));
        $this->assertTrue(is_file($fs->path('/var/bar.txt')));
        $this->assertTrue(is_link($fs->path('/var/bar.txt')));

        $this->assertNotEmpty($fooStat = stat($fs->path('/var/foo.txt')));
        $this->assertNotEmpty($barStat = stat($fs->path('/var/bar.txt')));

        $this->assertSame($barStat, $fooStat, 'stat calls on symlinks should resolve to real file');

        $this->assertSame(0100755, $fooStat['mode'] ?? null);

        $this->assertSame($this->emulator->getUserId('test-user'), $fooStat['uid'] ?? null);
        $this->assertSame($this->emulator->getGroupId('test-group'), $fooStat['gid'] ?? null);

        $fs->createSymlink('link', 'var/bar.txt');

        $this->assertTrue(is_link($fs->path('/link')));

        try {
            $fs->createSymlink('/', '/missing/file');
            $this->fail('Cannot create a symilink to a non exiting file');
        } catch (\Exception $e) {
            $this->assertInstanceOf(\InvalidArgumentException::class, $e);
            $this->assertRegExp('{Failed to resolve path}', $e->getMessage());
        }
    }

    public function testCreateStructure()
    {
        $structure = [
            'foo.txt' => '',
            'bar.txt',
            new Directory('var', $this->emulator->getUserId('other-user'), $this->emulator->getGroupId('other-group')),
            'var' => [
                new File('data.log', '', $this->emulator->getUserId('test-user'), $this->emulator->getGroupId('test-group')),
            ],
        ];

        $fs = new VirtualFileSystem($structure, $this->emulator);

        $this->assertTrue(is_file($fs->path('foo.txt')));
        $this->assertTrue(is_file($fs->path('/bar.txt')));
        $this->assertTrue(is_dir($fs->path('/var')));
        $this->assertTrue(is_file($fs->path('var/data.log')));
    }

    public function testCreateFunction()
    {
        $this->assertFalse(function_exists(__NAMESPACE__.'\realpath'));
        $this->assertFalse(function_exists(__NAMESPACE__.'\glob'));

        $fs = new VirtualFileSystem();

        $fs->createFunction(__NAMESPACE__, new Glob());
        $fs->createFunction(__NAMESPACE__, new RealPath());

        $this->assertTrue(function_exists(__NAMESPACE__.'\realpath'));
        $this->assertTrue(function_exists(__NAMESPACE__.'\glob'));
    }
}
