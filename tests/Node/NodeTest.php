<?php

declare(strict_types=1);

/*
 * This file is part of Twifty Virtual Filesystem.
 *
 * (c) Owen Parry <waldermort@gmail.com>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace Twifty\Test\Virtual\Node;

use PHPUnit\Framework\TestCase;
use Twifty\VirtualFileSystem\Content\AccessMode;
use Twifty\VirtualFileSystem\Exception\NodeException;
use Twifty\VirtualFileSystem\Node\AbstractNode;
use Twifty\VirtualFileSystem\Node\Directory;
use Twifty\VirtualFileSystem\Node\File;
use Twifty\VirtualFileSystem\Node\Root;
use Twifty\VirtualFileSystem\Node\Symlink;
use Twifty\VirtualFileSystem\System\Factory;

/**
 * Test case for AbstractNode.
 *
 * Generated by twifty-test-generator 0.0.1-beta.1 on 2017-07-10.
 *
 * @author Owen Parry <waldermort@gmail.com>
 */
class NodeTest extends TestCase
{
    public function testConstructor()
    {
        $time = time();

        /* @var $node AbstractNode */
        $node = $this->getMockForAbstractClass(AbstractNode::class, ['foo', 1000, 2000]);

        $this->assertSame('foo', $node->getFilename());
        $this->assertSame(1000, $node->getOwner());
        $this->assertSame(2000, $node->getGroup());
        $this->assertSame(0755, $node->getMode());

        $this->assertGreaterThanOrEqual($time, $node->getChangedTime());
        $this->assertGreaterThanOrEqual($time, $node->getAccessedTime());
        $this->assertGreaterThanOrEqual($time, $node->getModifiedTime());

        $this->assertTrue($node->isReadable(1000, 0), 'Owner should be able to read');
        $this->assertTrue($node->isReadable(0, 2000), 'Group should be able to read');
        $this->assertTrue($node->isReadable(0, 0), 'Others should be able to read');

        $this->assertTrue($node->isWritable(1000, 0), 'Owner should be able to write');
        $this->assertFalse($node->isWritable(0, 2000), 'Group should not be able to write');
        $this->assertFalse($node->isWritable(0, 0), 'Others should not be able to write');
    }

    public function testRootNode()
    {
        $factory = $this->createMock(Factory::class);

        $node = new Root('scheme', $factory);

        $this->assertSame('scheme://', (string) $node);
        $this->assertSame($factory, $node->getFactory());

        try {
            (new Directory('test', 0, 0))->addChild($node);
            $this->fail('A root node cannot become the child of another node');
        } catch (\Exception $e) {
            $this->assertInstanceOf(\LogicException::class, $e);
            $this->assertSame('A Root node cannot have a parent.', $e->getMessage());
        }
    }

    public function testDirectory()
    {
        $child = $this->getMockForAbstractClass(AbstractNode::class, ['child', 0, 0]);

        $node = new Directory('test', 1000, 2000);

        $this->assertSame(0, $node->getSize());
        $this->assertInstanceOf(\ArrayIterator::class, $node->getIterator());
        $this->assertEmpty($node->getChildren());

        $node->addChild($child);

        $this->assertTrue($node->hasChild('child'));
        $this->assertSame($child, $node->getChild('child'));
        $this->assertSame($node, $child->getParent());

        try {
            $node->renameChild('child', 'child');
            $this->fail('A child cannot be renamed to an existing name');
        } catch (\Exception $e) {
            $this->assertInstanceOf(NodeException::class, $e);
            $this->assertSame('File exists "::test/child"', $e->getMessage());
        }

        try {
            $node->renameChild('child', '/child');
            $this->fail('A child cannot be renamed with illegal characters');
        } catch (\Exception $e) {
            $this->assertInstanceOf(\LogicException::class, $e);
            $this->assertSame('Filenames cannot contain the "/" character ("/child")', $e->getMessage());
        }

        $node->renameChild('child', 'new');

        $this->assertFalse($node->hasChild('child'));
        $this->assertTrue($node->hasChild('new'));
        $this->assertSame($child, $node->getChild('new'));
        $this->assertSame('new', $node->getChild('new')->getFilename());

        try {
            $node->addChild(new Directory('new', 0, 0));
            $this->fail('->addChild should fail when a named child already exists');
        } catch (\Exception $e) {
            $this->assertInstanceOf(NodeException::class, $e);
            $this->assertSame('File exists "::test/new"', $e->getMessage());
        }

        try {
            $node->getChild('child');
            $this->fail('A renamed child should not exist');
        } catch (\Exception $e) {
            $this->assertInstanceOf(NodeException::class, $e);
            $this->assertSame('File not found "::test/child"', $e->getMessage());
        }

        try {
            $node->removeChild(new Directory('new', 0, 0));
            $this->fail('Same name but not the same instance');
        } catch (\Exception $e) {
            $this->assertInstanceOf(NodeException::class, $e);
            $this->assertSame('File not found', $e->getMessage());
        }

        $node->removeChild('new');
        $this->assertFalse($node->hasChild('new'));
        $this->assertEmpty($node->getChildren());
    }

    public function testFile()
    {
        $time = time();
        $node = new File('test', 'existing content', 1000, 2000, 0555);

        $this->assertSame(16, $node->getSize());
        $node->open(AccessMode::MODE_READWRITE);

        $this->assertSame('existing content', $node->read(30));
        $this->assertSame(9, $node->write(' appended'));

        $this->assertTrue($node->seek(0, SEEK_SET));
        $this->assertSame('existing content appended', $node->read(30));

        $stat = $node->stat();

        $this->assertSame(0555 | 0100000, $stat['mode']);
        $this->assertSame(1000, $stat['uid']);
        $this->assertSame(2000, $stat['gid']);
        $this->assertSame(25, $stat['size']);
        $this->assertGreaterThanOrEqual($time, $stat['atime']);
        $this->assertGreaterThanOrEqual($time, $stat['mtime']);
        $this->assertGreaterThanOrEqual($time, $stat['ctime']);

        $this->assertFalse($node->setOption(0, 0, 0), 'Method not implemented');
        $this->assertFalse($node->cast(0), 'Method not implemented');
    }

    public function testSymlink()
    {
        $target = new File('target', 'content', 1000, 2000);
        $node = new Symlink('link', $target, 1000, 2000);

        $this->assertSame('::target', $target->getPath());
        $this->assertSame('::link', $node->getPath());

        $this->assertSame($target, $node->getTarget());
        $this->assertSame(strlen('::target'), $node->getSize());
    }
}
